"""
Django Settings for UniSpaces Project

This is the main configuration file for the UniSpaces social networking
application. It contains all the settings and configurations needed
to run the Django application properly.

UniSpaces is a space-themed academic social network that allows users to:
- Create hierarchical communities (like Universities -> Departments)
- Manage user profiles with academic information
- Visualize communities as floating "planets" on a space canvas
- Connect with other users in their academic communities

Key Configuration Areas:
- Database settings (SQLite for development)
- Static files and media handling
- Authentication system
- Application registration
- Security configurations

Generated by Django 5.1.3 with custom modifications for the UniSpaces project.

For more information on Django settings:
https://docs.djangoproject.com/en/5.1/topics/settings/
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# This is the root directory of the Django project
BASE_DIR = Path(__file__).resolve().parent.parent

# Security Settings
# =================

# SECURITY WARNING: keep the secret key used in production secret!
# Uses environment variable for production, fallback for development
SECRET_KEY = os.environ.get('ENV_SECRET_KEY', 'your-default-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
# Debug mode provides detailed error pages and should be disabled in production
DEBUG = True

# Hosts allowed to serve this Django application
# Should be configured properly for production deployment
ALLOWED_HOSTS = []

# Application Configuration
# ========================

# Django applications that are enabled for this project
# Order matters - custom apps should come before Django built-ins to override defaults
INSTALLED_APPS = [
    # Custom Applications
    # -------------------
    # Accounts app comes first to override Django's default auth templates and behavior
    'accounts.apps.AccountsConfig',  # User authentication, profiles, and dashboard
    
    # Django Built-in Applications
    # ----------------------------
    "django.contrib.admin",         # Admin interface for data management
    "django.contrib.auth",          # User authentication system
    "django.contrib.contenttypes",  # Content type framework
    "django.contrib.sessions",      # Session framework
    "django.contrib.messages",      # Messaging framework
    "django.contrib.staticfiles",   # Static file handling
    
    # Third-party Applications
    # ------------------------
    "crispy_forms",                 # Form styling with Bootstrap
    
    # Project Applications
    # --------------------
    "home",                         # Homepage and landing page content
    "communities",                  # Community creation and management
]

# Middleware Configuration
# =======================
# Middleware components that process requests and responses
# Order is important - they are applied in the order listed
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",      # Security headers and HTTPS
    "django.contrib.sessions.middleware.SessionMiddleware",  # Session support
    "django.middleware.common.CommonMiddleware",          # Common functionality
    "django.middleware.csrf.CsrfViewMiddleware",          # CSRF protection
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # User authentication
    "django.contrib.messages.middleware.MessageMiddleware",  # Message framework
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # Clickjacking protection
]

# URL Configuration
# ================
# Root URL configuration module for the project
ROOT_URLCONF = "unispaces.urls"

# Template Configuration
# ======================
# Template engine settings for rendering HTML pages
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # Custom templates directory at project root level
        "DIRS": [BASE_DIR / "templates"],
        # Enable app-specific template directories
        "APP_DIRS": True,
        "OPTIONS": {
            # Context processors provide variables available in all templates
            "context_processors": [
                "django.template.context_processors.debug",      # Debug information
                "django.template.context_processors.request",   # Request object
                "django.contrib.auth.context_processors.auth",  # User authentication
                "django.contrib.messages.context_processors.messages",  # Flash messages
            ],
        },
    },
]

# WSGI Configuration
# ==================
# Web Server Gateway Interface application
WSGI_APPLICATION = "unispaces.wsgi.application"

# Database Configuration
# =====================
# Currently using PostgreSQL for production, SQLite fallback available

# Production PostgreSQL Database (Docker environment)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'unispaces_db',
        'USER': 'unispaces_user',
        'PASSWORD': 'Ya<PXE+r&)tM?@gVfy4pUZJw?S*.+An<',
        'HOST': os.environ.get('DB_HOST', 'db'),  # Docker service name for database
        'PORT': '5432',
    }
}

# Alternative PostgreSQL configuration using environment variables
# This configuration is commented out but available for Docker deployments
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.environ.get('POSTGRES_DB'),
#         "USER": os.environ.get('POSTGRES_USER'),
#         "PASSWORD": os.environ.get('POSTGRES_PASSWORD'),
#         "HOST": os.environ.get('DB_HOST', 'db'),  # Set in docker-compose file
#         "PORT": os.environ.get('DB_PORT', '5432'),  # Set in docker-compose file
#     }
# }

# SQLite Database (Development fallback)
# Uncomment this section and comment out PostgreSQL for local development
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }


# Password Validation
# ==================
# Built-in password validators to ensure strong passwords
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        # Prevents passwords similar to user information
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        # Enforces minimum password length (default: 8 characters)
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        # Prevents commonly used passwords
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        # Prevents purely numeric passwords
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# ===================
# Localization and time zone settings
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"              # Default language
TIME_ZONE = "America/Los_Angeles"    # Project time zone
USE_I18N = True                      # Enable internationalization
USE_TZ = True                        # Enable timezone support

# Static Files Configuration
# ==========================
# Settings for CSS, JavaScript, and other static assets
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"               # URL prefix for static files

# Additional static files settings for production:
# STATIC_ROOT = BASE_DIR / "staticfiles"  # Where collectstatic puts files
# STATICFILES_DIRS = [BASE_DIR / "static"]  # Additional static file directories

# Media Files Configuration
# =========================
# Settings for user-uploaded files (like profile pictures)

MEDIA_URL = '/media/'                # URL prefix for media files
MEDIA_ROOT = BASE_DIR / 'media'      # Directory where uploaded files are stored

# Default Field Type
# ==================
# Default primary key field type for new models
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Third-party Application Settings
# ================================

# Crispy Forms Configuration
# -------------------------
# Bootstrap styling for Django forms
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Authentication and Authorization Settings
# ========================================

# Redirect URLs for authentication flow
SIGN_UP_REDIRECT_URL = 'login'      # Where to go after successful signup
LOGIN_REDIRECT_URL = 'dashboard'    # Where to go after successful login
LOGOUT_REDIRECT_URL = 'login'       # Where to go after logout

# URL for login page when authentication is required
LOGIN_URL = 'login'                 # Redirect here when @login_required fails

# Additional Security Settings for Production
# ==========================================
# These should be uncommented and configured for production deployment:

# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = 31536000
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
# SECURE_CONTENT_TYPE_NOSNIFF = True
# SECURE_BROWSER_XSS_FILTER = True
# X_FRAME_OPTIONS = 'DENY'